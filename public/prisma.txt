// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
/*
DATABASE_URL= "mongodb+srv://iamshafi:iamshafi@cluster0.jfsw3dj.mongodb.net/nextbnb"
NEXTAUTH_URL = http://localhost:3000
NEXTAUTH_SECRET = mysecretid
GITHUB_ID= "03a137ab86630dfa21fc"
GITHUB_SECRET= "10f76b7988e3ad561c4bd6184b5fb4e6d0906ce8"
 
# GOOGLE_CLIENT_ID="124990660042-6bklvm1jdg20kbmc6lfujt2irf1j55cs.apps.googleusercontent.com"
GOOGLE_CLIENT_ID= "1058546103548-360l2hg90pn8hegi6k9b4oho7rtenqus.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET= "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"
# GOOGLE_CLIENT_SECRET="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"

NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME= "dsrypgpma"
*/
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  favoriteIds     String[] @db.ObjectId

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  createdAt DateTime @default(now())
  category  String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationValue String
  userId String @db.ObjectId
  price Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId  
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}
